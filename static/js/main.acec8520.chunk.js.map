{"version":3,"sources":["components/Form/Form.js","store/actions/todoAction.js","store/actions/actionTypes.js","store/actions/noteAction.js","components/List/TextAndForm.js","components/List/List.js","store/index.js","components/NoteList/NoteList.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClickChoice","value","setState","choice","onChangeHandler","e","text","target","onSubmit","state","addTodos","addNotes","_this2","styleButtonTodo","styleButtonNotes","react_default","a","createElement","Fragment","className","concat","onClick","onChange","type","placeholder","Component","connect","dispatch","todo","payload","addTodo","note","addNote","TextAndForm","editButtonHandler","viewMode","saveButtonHandler","editTodo","index","cancelButtonHandler","deleteButtonHandler","deleteTodo","buttonEdit","List","todos","map","key","List_TextAndForm","onDelete","deleteHander","todoReducer","initialStateTodos","initialStateNotes","notes","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","toConsumableArray","newTodos","filter","element","noteReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","NoteList","App","handleSubmit","prevState","es","components_Form_Form","submit","components_List_List","components_NoteList_NoteList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.acec8520.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import connect from react-redux\nimport { connect } from \"react-redux\";\n// import todoAction\nimport { addTodo } from '../../store/actions/todoAction';\n// import note action\nimport { addNote } from \"../../store/actions/noteAction\";\n\nclass Form extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      text: '',\n      choice: 'todo'\n    }\n  }  \n\n  // button choice handler\n  onClickChoice = (value) => {\n    this.setState({ choice: value });\n  }\n\n  onChangeHandler = (e) => {\n    this.setState({ text : e.target.value })\n  }\n\n  onSubmit = () => {\n    // this.props.submit(this.state.text);\n    // to dispatch action\n    if (this.state.choice === 'todo') {\n      this.props.addTodos(this.state.text);\n    } else {\n      this.props.addNotes(this.state.text);\n      // console.log(this.props.addNotes(this.state.text))\n    }\n\n    this.setState({ text: '' })\n  }\n\n  render () {\n    // button choice for active form\n    var styleButtonTodo = '';\n    var styleButtonNotes = '';\n    if (this.state.choice === 'todo') {\n      styleButtonTodo = 'btn-success';\n    } else {\n      styleButtonNotes = 'btn-success';\n    }\n\n    return (\n      <>\n        <button className={`btn m-2 ${styleButtonTodo}`} onClick={() => this.onClickChoice('todo')}>Switch to Add Todo</button>\n        <button className={`btn m-2 ${styleButtonNotes}`} onClick={() => this.onClickChoice('notes')}>Switch to Add Note</button>\n        <p className=\"text-capitalize\">Add {this.state.choice}</p>\n        <div className=\"form-group\">\n          <input \n          value={this.state.text}\n          onChange={this.onChangeHandler} type=\"text\" className=\"form-control\" placeholder=\"Type todo here\" />\n        </div>\n        <button onClick={this.onSubmit} className=\"btn btn-primary\">Add</button>\n      </>\n    )\n  }\n} \n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addTodos: (todo) => dispatch(addTodo(todo)),\n        addNotes: (note) => dispatch(addNote(note))\n    }\n}\n\n// Kode diatas sebenarnya adalah kita membuat suatu props bernama addTodos yang berupa fungsi untuk melakukan dispatch action. Action wajib memiliki key type. Kita dapat mengisi type ini dengan string tertentu sehingga reducer dapat menentukan langkah apa yang akan dilakukan berdasar action type yang diberikan. Di dalam action ini kita juga menambahkan payload karena kita ingin mengirimkan todo dari form untuk ditambahkan ke dalam state di store.\n\n// export default lama\n// export default Form;\n\n// export default baru\nexport default connect(null, mapDispatchToProps)(Form);\n\n","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const addTodo = (todo) => ({\r\n    type: actionTypes.ADD_TODO,\r\n    payload: todo\r\n});\r\n\r\nexport const editTodo = (payload) => ({\r\n    type: actionTypes.EDIT_TODO,\r\n    payload: payload\r\n});\r\n\r\nexport const deleteTodo = (index) => ({\r\n    type: actionTypes.DELETE_TODO,\r\n    payload: index\r\n})","export const ADD_TODO       = 'ADD_TODO';\r\nexport const EDIT_TODO      = 'EDIT_TODO';\r\nexport const DELETE_TODO    = 'DELETE_TODO';\r\nexport const ADD_NOTE       = 'ADD_NOTE';","import * as actionTypes from \"./actionTypes\";\r\n\r\nexport const addNote = (note) => ({\r\n    type: actionTypes.ADD_NOTE,\r\n    payload: note\r\n})","import React, { Component } from 'react';\r\n// import connect dari react redux\r\nimport { connect } from \"react-redux\";\r\n// import todoAction\r\nimport { editTodo, deleteTodo } from \"../../store/actions/todoAction\";\r\n\r\nclass TextAndForm extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            // viewMode = 'show' -> tampilkan text todo, button edit\r\n            // viewMode = 'edit' -> tampilkan form input todo dan tombol edit berubah menjadi dua tombol yaitu tombol save dan cancel\r\n            viewMode: 'show',\r\n            text: props.todo\r\n        }\r\n    }\r\n\r\n    // fungsi untuk menangani ketika user klik tombol edit\r\n    editButtonHandler = () => {\r\n        this.setState({ viewMode: 'edit' });\r\n    }\r\n\r\n    // fungsi untuk menangani ketika user klik tombol save\r\n    saveButtonHandler = () => {\r\n        this.props.editTodo(this.props.index, this.state.text);\r\n        this.setState({ viewMode: 'show' });\r\n    }\r\n\r\n    // fungsi untuk menangani ketika user klik tombol cancel\r\n    cancelButtonHandler = () => {\r\n        this.setState({ viewMode: 'show' });\r\n    }\r\n\r\n    // fungsi untuk handler ketika user edit text di form\r\n    onChangeHandler = (e) => {\r\n        this.setState({ text: e.target.value });\r\n    }\r\n\r\n    // fungsi untuk handle ketika user klik tombol delete\r\n    deleteButtonHandler = () => {\r\n        this.props.deleteTodo(this.props.index);\r\n    }\r\n\r\n    render() {\r\n        // default tampilan todo berupa text\r\n        var todo = (\r\n            <p>{this.props.todo}</p>\r\n        )\r\n\r\n        // default tampilan di samping text todo berupa tombol edit\r\n        var buttonEdit = (\r\n            <button className=\"btn btn-primary\" onClick={this.editButtonHandler}>Edit</button>\r\n        )\r\n\r\n        // jika viewMode berubah menjadi \"edit\",\r\n        if (this.state.viewMode === 'edit') {\r\n            // ganti element text todo menjadi form input\r\n            todo = (\r\n                <input\r\n                    className=\"form-control\"\r\n                    type=\"text\"\r\n                    value={this.state.text}\r\n                    onChange={this.onChangeHandler}\r\n                />\r\n            )\r\n\r\n            // ganti tombol edit menjadi tombol save dan cancel\r\n            buttonEdit = (\r\n                <>\r\n                <button className=\"btn btn-success\" onClick={this.saveButtonHandler}>Save</button>\r\n                <button className=\"btn btn-warning\" onClick={this.cancelButtonHandler}>Cancel</button>\r\n                </>\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-8\">\r\n                    {todo}\r\n                </div>\r\n                <div className=\"col-4\">\r\n                    {buttonEdit}\r\n                    <button className=\"btn btn-danger\" onClick={this.deleteButtonHandler}>Delete</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// dispatch action\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        editTodo: (index, todo) => dispatch(editTodo({index, todo})),\r\n        deleteTodo: (index) => dispatch(deleteTodo(index))\r\n    }\r\n}\r\n\r\n// export default TextAndForm;\r\nexport default connect(null, mapDispatchToProps)(TextAndForm);\r\n","import React, { Component } from 'react'\n// import react-redux\nimport { connect } from \"react-redux\";\n// import TextAndForm.js\nimport TextAndForm from \"./TextAndForm\";\n\nclass List extends Component {\n\n  // delete button handler\n  deleteHander (index) {\n    this.props.deleteTodo(index);\n  }\n\n  render (){\n    return (\n      <ul className=\"list-group\">\n        {/* tampilkan todo dengan looping */}\n        {this.props.todos.map((todo, index) => (\n          // <li className=\"list-group-item\">{todo}</li>\n          <li key={index} className=\"list-group-item\">\n            {/* {todo}\n            <button type=\"button\" className=\"btn btn-danger float-right\" onClick={() => this.deleteHander(index)}>Delete {index}</button> */}\n            {/* Gunakan komponen TextAndForm */}\n            <TextAndForm\n              todo={todo}\n              index={index}\n              onDelete={() => this.deleteHander(index)}\n            />\n          </li>\n        ))}\n      </ul>\n    )    \n  }\n}\n\n// subscribe state change -> input state in store to component props in List\nconst mapStateToProps = state => {\n  return {\n    todos: state.todoReducer.todos,\n  }\n}\n\n// dipatch action\n// const mapDipatchToProps = dispatch => {\n//   return {\n//     deleteTodo: (index) => dispatch({ type: 'DELETE_TODO', payload: index })\n//   }\n// }\n\n// export default lama\n// export default List;\n\n// export default baru dengan connect\nexport default connect(mapStateToProps, null)(List);\n\n// Method connect menerima 2 parameter yaitu mapStateToProps dan mapDipatchToProps. mapStateToProps untuk memasukkan state store ke dalam props component, sedangkan mapDispatchToProps digunakan agar component dapat melakukan dipatch suatu action. Nama mapStateToProps dan mapDipatchToProps dapat diganti sesuai keinginan, namun pada umumnya ditulis demikian. Jika mapStateToProps atau mapDispatchToProps tidak ingin digunakan, maka pada parameter connect dapat di isi null.\n","import { createStore, combineReducers } from \"redux\";\r\n// import actionTypes\r\nimport * as actionTypes from './actions/actionTypes';\r\n\r\n// initial state todo\r\nconst initialStateTodos = {\r\n    todos: []\r\n}\r\n\r\n// initial state notes\r\nconst initialStateNotes = {\r\n    notes: []\r\n}\r\n\r\n// todo reducer\r\nconst todoReducer = (state = initialStateTodos, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_TODO:\r\n            return {\r\n                ...state,\r\n                todos: [...state.todos, action.payload]\r\n            }\r\n            break;\r\n        case actionTypes.DELETE_TODO:\r\n            // menghapus dengan method splice\r\n\r\n            // copy state todos\r\n            // let newTodos = [...state.todos];\r\n            // // hapus element array\r\n            // newTodos.splice(action.payload.index, 1);\r\n\r\n\r\n            // menghapus dengan method filter\r\n\r\n            let newTodos = state.todos.filter((element, index) => index !== action.payload)\r\n\r\n            // return state baru\r\n            return {\r\n                ...state,\r\n                todos: newTodos,\r\n            }\r\n        case actionTypes.EDIT_TODO:\r\n            // edit state\r\n\r\n            // copy state todos\r\n            let todos = [...state.todos];\r\n            // ganti data todo\r\n            let index = action.payload.index;\r\n            let todo = action.payload.todo;\r\n            todos[index] = todo;\r\n\r\n            // return state baru\r\n            return {\r\n                ...state,\r\n                todos\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// note reducer\r\nconst noteReducer = (state = initialStateNotes, action) => {\r\n    // return state;\r\n\r\n    // check action\r\n    switch (action.type) {\r\n        \r\n        case actionTypes.ADD_NOTE:\r\n            // add note\r\n\r\n            return {\r\n                ...state,\r\n                notes: [...state.notes, action.payload]\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// root reducer -> for combine 2 reducer\r\nconst rootReducer = combineReducers({\r\n    todoReducer: todoReducer,\r\n    noteReducer: noteReducer\r\n})\r\n\r\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nexport default store;","import React, { Component } from 'react'\r\nimport { connect } from \"react-redux\";\r\n\r\nclass NoteList extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>Notes</p>\r\n                <ul className=\"list-group\">\r\n                    {this.props.notes.map((note, index) => (\r\n                        <li key={index} className=\"list-group-item container\">\r\n                            {note}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        notes: state.noteReducer.notes\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(NoteList)","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './components/Form/Form';\nimport List from './components/List/List';\n// import provider\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n// import component NoteList\nimport NoteList from './components/NoteList/NoteList'\n\nclass App extends Component {\n  constructor () {\n    super()\n    this.state = {\n      todos: []\n    }\n  }\n  \n  handleSubmit = (todo) => {\n    this.setState(prevState => (\n      {todos: prevState.todos.concat(todo) }\n    ))\n  }\n\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App container\">\n          <Form submit={this.handleSubmit}/>\n          <List todos={this.state.todos} />\n          <NoteList/>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}